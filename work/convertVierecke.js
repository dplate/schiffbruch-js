const tileTypes = {
  0: 'FLAT',
  1: 'SLOPE_NORTH',
  2: 'SLOPE_WEST',
  3: 'SLOPE_SOUTH',
  4: 'SLOPE_EAST',
  5: 'RIDGE_NORTH_EAST',
  6: 'RIDGE_NORTH_WEST',
  7: 'RIDGE_SOUTH_WEST',
  8: 'RIDGE_SOUTH_EAST',
  9: 'CANYON_SOUTH_EAST',
  10: 'CANYON_NORTH_EAST',
  11: 'CANYON_NORTH_WEST',
  12: 'CANYON_SOUTH_WEST'
};

const directions = {
  0: 'WEST',
  1: 'NORTH',
  2: 'EAST',
  3: 'SOUTH'
};

const connections = {
  1: -1,
  2: 0,
  3: 1
};

const Vierecke = //0=Passt nicht 1=1runter 2=gleiche Hoehe 3=1hoch
  [ // 0  1  2  3  4  5  6  7  8  9 10 11 12
    [ /*0*/
      [2, 0, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 1], //0
      [2, 1, 0, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0], //1
      [2, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 0], //2 Kante
      [2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 0, 0, 1]  //3
    ],
    [  /*1*/
      [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0],
      [2, 1, 0, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0],
      [0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0],
      [3, 3, 0, 2, 0, 3, 3, 0, 0, 2, 0, 0, 2]
    ],
    [ /*2*/
      [2, 0, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 1],
      [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2],
      [3, 0, 3, 0, 2, 0, 3, 3, 0, 2, 2, 0, 0],
      [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0]
    ],
    [ /*3*/
      [0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0],
      [3, 2, 0, 3, 0, 0, 0, 3, 3, 0, 2, 2, 0],
      [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2],
      [2, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 1]
    ],
    [ /*4*/
      [3, 0, 2, 0, 3, 3, 0, 0, 3, 0, 0, 2, 2],
      [0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0],
      [2, 0, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0, 0],
      [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0]
    ],
    [ /*5*/
      [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0],
      [2, 1, 0, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0],
      [2, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 0],
      [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0]
    ],
    [ /*6*/
      [2, 0, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 1],
      [2, 1, 0, 2, 0, 0, 0, 2, 2, 0, 1, 1, 0],
      [0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0],
      [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0]
    ],
    [ /*7*/
      [2, 0, 1, 0, 2, 2, 0, 0, 2, 0, 0, 1, 1],
      [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2],
      [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2],
      [2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 0, 0, 1]
    ],
    [ /*8*/
      [0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0],
      [0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0],
      [2, 0, 2, 0, 1, 0, 2, 2, 0, 1, 1, 0, 0],
      [2, 2, 0, 1, 0, 2, 2, 0, 0, 1, 0, 0, 1]
    ],
    [ /*9*/
      [3, 0, 2, 0, 3, 3, 0, 0, 3, 0, 0, 2, 2],
      [3, 2, 0, 3, 0, 0, 0, 3, 3, 0, 2, 2, 0],
      [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2],
      [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0]
    ],
    [ /*10*/
      [3, 0, 2, 0, 3, 3, 0, 0, 3, 0, 0, 2, 2],
      [0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0],
      [0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0],
      [3, 3, 0, 2, 0, 3, 3, 0, 0, 2, 0, 0, 2]
    ],
    [ /*11*/
      [0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0],
      [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2],
      [3, 0, 3, 0, 2, 0, 3, 3, 0, 2, 2, 0, 0],
      [3, 3, 0, 2, 0, 3, 3, 0, 0, 2, 0, 0, 2]
    ],
    [ /*12*/
      [0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0],
      [3, 2, 0, 3, 0, 0, 0, 3, 3, 0, 2, 2, 0],
      [3, 0, 3, 0, 2, 0, 3, 3, 0, 2, 2, 0, 0],
      [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0]
    ]
  ];

  let output = '';
  for (let type in Vierecke) {
    output += `[tileTypes.${tileTypes[type]}]: {\n`;
    for (let direction in Vierecke[type]) {
      output += `[direction.${directions[direction]}]: [\n`;
      for (let neighborType in Vierecke[type][direction]) {
        const connection = Vierecke[type][direction][neighborType];
        if (connection) {
          output += `{ type: tileTypes.${tileTypes[neighborType]}, heightChange: ${connections[connection]} },\n`;
        }
      }
      output += '],\n';
    }
    output += '},\n';
  }

  console.log(output);